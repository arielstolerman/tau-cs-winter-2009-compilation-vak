# this is the optimized lir translation
# string literals
str_null_ref: "Runtime Error: Null pointer dereference!"
str_array_access: "Runtime Error: Array index out of bounds!"
str_size: "Runtime Error: Array allocation with negative array size!"
str_zero: "Runtime Error: Division by zero!"
str1: ""
str0: "Current value: "

# class dispatch tables
_DV_Calculator: []
# fields offsets:

_DV_A: []
# fields offsets:


# Runtime checks:
__checkNullRef:
Move a,Rc1
Compare 0,Rc1
JumpTrue __checkNullRef_err
Return 9999
__checkNullRef_err:
Library __println(str_null_ref),Rdummy
Jump _error_exit

__checkArrayAccess:
Move a,Rc1
Move i,Rc2
ArrayLength Rc1,Rc1
Compare Rc1,Rc2
JumpGE __checkArrayAccess_err
Compare 0,Rc2
JumpL __checkArrayAccess_err
Return 9999
__checkArrayAccess_err:
Library __println(str_array_access),Rdummy
Jump _error_exit

__checkSize:
Move n,Rc1
Compare 0,Rc1
JumpL __checkSize_err
Return 9999
__checkSize_err:
Library __println(str_size),Rdummy
Jump _error_exit

__checkZero:
Move b,Rc1
Compare 0,Rc1
JumpTrue __checkZero_err
Return 9999
__checkZero_err:
Library __println(str_zero),Rdummy
Jump _error_exit

# methods
_Calculator_plus:
Move x1,R0
Add y1,R0
Return R0

_Calculator_minus:
Move x1,R0
Sub y1,R0
Return R0

_Calculator_mul:
# argument #0:
Move x1,R0
Mul y1,R0
# call statement:
StaticCall _Calculator_mod(x1=R0),R0
Return R0

_Calculator_mod:
Move x1,R0
Move 500,R1
StaticCall __checkZero(b=R1),Rdummy
Mod R1,R0
Return R0

_Calculator_mix:
Move 0,R0
Move R0,i1
_while_cond_label0:
Move i1,R0
Compare 200,R0
JumpL _true_label1
Move 0,R0
Jump _end_label1
_true_label1:
Move 1,R0
_end_label1:
Compare 0,R0
JumpTrue _end_label0
# argument #0:
# argument #0:
Move y1,R0
# argument #1:
Move x1,R1
# call statement:
StaticCall _Calculator_mul(x1=R0,y1=R1),R0
# argument #1:
# argument #0:
Move x1,R1
# argument #1:
Move y1,R2
# call statement:
StaticCall _Calculator_plus(x1=R1,y1=R2),R1
# call statement:
StaticCall _Calculator_minus(x1=R0,y1=R1),R0
Move R0,R0
Move R0,x1
# argument #0:
# argument #0:
Move x1,R0
# argument #1:
Move x1,R1
# call statement:
StaticCall _Calculator_mul(x1=R0,y1=R1),R0
# argument #1:
# argument #0:
Move x1,R1
# argument #1:
Move y1,R2
# call statement:
StaticCall _Calculator_minus(x1=R1,y1=R2),R1
# call statement:
StaticCall _Calculator_plus(x1=R0,y1=R1),R0
Move R0,R0
Move R0,y1
Move i1,R0
Add 1,R0
Move R0,R0
Move R0,i1
Jump _while_cond_label0
_end_label0:
# argument #0:
# argument #0:
Move x1,R0
# argument #1:
Move y1,R1
Sub 123,R1
# call statement:
StaticCall _Calculator_mul(x1=R0,y1=R1),R0
# argument #1:
# argument #0:
Move 2,R1
Mul x1,R1
# argument #1:
Move y1,R2
# call statement:
StaticCall _Calculator_mul(x1=R1,y1=R2),R1
# call statement:
StaticCall _Calculator_minus(x1=R0,y1=R1),R0
Move R0,R0
Move R0,i1
Return i1

# main method
_ic_main:
Move 0,R0
Move R0,i1
Move 1,R0
Move R0,val1
_while_cond_label2:
Move i1,R0
Compare 40,R0
JumpL _true_label3
Move 0,R0
Jump _end_label3
_true_label3:
Move 1,R0
_end_label3:
Compare 0,R0
JumpTrue _end_label2
# argument #0:
Move val1,R0
# argument #1:
# argument #0:
Move val1,R1
# argument #1:
Move 3,R2
# call statement:
StaticCall _Calculator_minus(x1=R1,y1=R2),R1
# call statement:
StaticCall _Calculator_mix(x1=R0,y1=R1),R0
Move R0,R0
Move R0,val1
# argument #0:
Move str0,R0
Library __print(R0),R0
# argument #0:
Move val1,R0
Library __printi(R0),R0
# argument #0:
Move str1,R0
Library __println(R0),R0
Move i1,R0
Add 1,R0
Move R0,R0
Move R0,i1
Jump _while_cond_label2
_end_label2:

_error_exit:
